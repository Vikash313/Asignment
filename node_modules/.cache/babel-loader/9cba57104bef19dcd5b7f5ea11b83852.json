{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Asignment\\\\asignment\\\\src\\\\components\\\\Quiz.js\";\nimport React, { Component, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { qBank } from './QuestCollection';\nimport '../style.css';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getQuestion = () => {\n      //const{cIndex} = this.state;\n      this.setState(() => {\n        return {\n          question: qBank[this.props.cIndex].question,\n          options: qBank[this.props.cIndex].options,\n          answer: qBank[this.props.cIndex].answer\n        };\n      });\n    };\n\n    this.onquestNext = () => {\n      const {\n        Answer,\n        score,\n        answer,\n        cIndex\n      } = this.state;\n\n      if (Answer === answer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      this.setState({\n        cIndex: this.props.cIndex + 1,\n        Answer: null\n      });\n    };\n\n    this.submitHandler = () => {\n      if (this.props.cIndex === qBank.length - 1) {\n        this.setState({\n          qFinish: true\n        });\n      }\n    };\n\n    this.checkAnswer = answer => {\n      this.setState({\n        Answer: this.state.answer,\n        disabled: false\n      });\n    };\n\n    this.state = {\n      options: [],\n      Answer: null,\n      //cIndex : 0,\n      disabled: true,\n      qFinish: false,\n      score: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestion();\n  }\n\n  // componentDidUpdate(prevProps, prevState){\n  //     //const{cIndex} = this.state;\n  //     if(prevProps.cIndex !== prevState.cIndex){\n  //        this.setState(() => {\n  //          return{\n  //             question: qBank[prevProps.cIndex].question,\n  //             options: qBank[prevProps.cIndex].options,\n  //             answer: qBank[prevProps.cIndex].answer\n  //           }\n  //         })\n  //     }\n  // }\n  render() {\n    const {\n      question,\n      options,\n      Answer,\n      qFinish\n    } = this.state;\n\n    if (qFinish) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Your Score is \", this.state.score, \" out of \", qBank.length, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log(\"this.props\", this.props), console.log(\"Index\", this.props.cIndex), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `Question ${this.props.cIndex + 1} of ${qBank.length} `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `options ${Answer === option ? \"selected\" : null}`,\n        onClick: () => this.checkAnswer(option),\n        children: option\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }, this)), this.props.cIndex < qBank.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.disabled,\n        onClick: this.props.onquestNext,\n        children: \"Next \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), this.props.cIndex === qBank.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.state.submitHandler,\n        disabled: this.state.disabled,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cIndex: state.cIndex\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onquestNext: () => dispatch({\n      type: 'QUEST_NEXT_ASYNC',\n      value: 1\n    }) //{type: 'QUEST_NEXT_ASYNC', value: 1}\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz); //onSubmit: () => dispatch({type: 'QUEST_SUBMIT', value: 1})  //onAgeUp: () => dispatch({type: 'AGE_UP', value: 1}),//QUEST_NEXT_ASYNC\n// useEffect = ((prevProps, prevState) => {\n//     console.log(\"PREVPROP\", prevProps.cIndex)\n//      if(prevProps.cIndex !== prevState.cIndex){\n//          this.setState(() => {\n//              return{\n//                 question: qBank[prevProps.cIndex].question,\n//                 options: qBank[prevProps.cIndex].options,\n//                 answer: qBank[prevProps.cIndex].answer\n//              }\n//          })\n//      }\n// },[])\n//  useEffect(() => {\n//      getQuestion();\n//  },[])\n// state = {\n//     questionBank: []\n// };\n// getQuestions = () => {\n//     QuestCollection().then(question => {\n//         this.setState({\n//             questionBank: question\n//         });\n//     });\n// };\n// componentDidMount() {\n//     this.getQuestions();\n// }","map":{"version":3,"sources":["E:/Asignment/asignment/src/components/Quiz.js"],"names":["React","Component","useEffect","connect","qBank","Quiz","constructor","props","getQuestion","setState","question","cIndex","options","answer","onquestNext","Answer","score","state","submitHandler","length","qFinish","checkAnswer","disabled","componentDidMount","render","console","log","map","option","id","mapStateToProps","mapDispatchToProps","dispatch","type","value"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport  { qBank }  from './QuestCollection'\r\nimport '../style.css'\r\n\r\nclass Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             options: [],\r\n             Answer: null,\r\n             //cIndex : 0,\r\n             disabled: true,\r\n             qFinish: false,\r\n             score: 0\r\n        }\r\n    }\r\n\r\n\r\n    getQuestion = () => {\r\n        //const{cIndex} = this.state;\r\n        this.setState(() => {\r\n            return{\r\n                question: qBank[this.props.cIndex].question,\r\n                options: qBank[this.props.cIndex].options,\r\n                answer: qBank[this.props.cIndex].answer  \r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getQuestion();\r\n    }\r\n\r\n\r\n    onquestNext = () => {\r\n        const { Answer, score, answer, cIndex } = this.state\r\n\r\n        if(Answer === answer){\r\n            this.setState({\r\n                score: score + 1\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            cIndex: this.props.cIndex + 1,\r\n            Answer: null\r\n        })\r\n    }\r\n\r\n    submitHandler = () => {\r\n        if(this.props.cIndex === qBank.length - 1){\r\n            this.setState({\r\n                qFinish: true\r\n            })\r\n        }\r\n    }\r\n\r\n    checkAnswer = answer => {\r\n        this.setState({\r\n            Answer: this.state.answer,\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n\r\n    // componentDidUpdate(prevProps, prevState){\r\n    //     //const{cIndex} = this.state;\r\n    //     if(prevProps.cIndex !== prevState.cIndex){\r\n    //        this.setState(() => {\r\n    //          return{\r\n    //             question: qBank[prevProps.cIndex].question,\r\n    //             options: qBank[prevProps.cIndex].options,\r\n    //             answer: qBank[prevProps.cIndex].answer\r\n    //           }\r\n    //         })\r\n    //     }\r\n    // }\r\n    \r\n\r\n    render() {\r\n        const{ question, options, Answer, qFinish } = this.state\r\n        \r\n        if(qFinish) {\r\n         return (\r\n             <div>\r\n                 <h2>Your Score is {this.state.score} out of {qBank.length} </h2>\r\n             </div>\r\n          )\r\n         }\r\n         \r\n        return (\r\n            <div>\r\n                {console.log(\"this.props\", this.props)}\r\n                {console.log(\"Index\", this.props.cIndex)}\r\n                <h2>{question}</h2>\r\n                <span>{`Question ${this.props.cIndex + 1} of ${qBank.length} `}</span>\r\n                {\r\n                    options.map(option => \r\n                        <p key ={option.id} className={`options ${Answer === option? \"selected\" : null}`}\r\n                            onClick = {() => this.checkAnswer(option)}>\r\n                                {option}\r\n                        </p>\r\n                        )\r\n                }\r\n                {this.props.cIndex  < qBank.length - 1 && \r\n                <button disabled = {this.state.disabled} onClick={this.props.onquestNext}>\r\n                    Next </button>}\r\n                {this.props.cIndex === qBank.length -1 &&\r\n                <button onClick={this.state.submitHandler} disabled ={this.state.disabled} >\r\n                    Submit\r\n                </button> }\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n \r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n    cIndex: state.cIndex\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n    onquestNext: () => dispatch({type: 'QUEST_NEXT_ASYNC', value: 1}), //{type: 'QUEST_NEXT_ASYNC', value: 1}\r\n    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz)\r\n\r\n\r\n//onSubmit: () => dispatch({type: 'QUEST_SUBMIT', value: 1})  //onAgeUp: () => dispatch({type: 'AGE_UP', value: 1}),//QUEST_NEXT_ASYNC\r\n\r\n\r\n\r\n\r\n\r\n    // useEffect = ((prevProps, prevState) => {\r\n    //     console.log(\"PREVPROP\", prevProps.cIndex)\r\n    //      if(prevProps.cIndex !== prevState.cIndex){\r\n    //          this.setState(() => {\r\n    //              return{\r\n    //                 question: qBank[prevProps.cIndex].question,\r\n    //                 options: qBank[prevProps.cIndex].options,\r\n    //                 answer: qBank[prevProps.cIndex].answer\r\n    //              }\r\n    //          })\r\n    //      }\r\n    // },[])\r\n\r\n\r\n\r\n\r\n        //  useEffect(() => {\r\n    //      getQuestion();\r\n    //  },[])\r\n    // state = {\r\n    //     questionBank: []\r\n    // };\r\n\r\n    // getQuestions = () => {\r\n    //     QuestCollection().then(question => {\r\n    //         this.setState({\r\n    //             questionBank: question\r\n    //         });\r\n    //     });\r\n\r\n    // };\r\n\r\n    // componentDidMount() {\r\n    //     this.getQuestions();\r\n    // }"]},"metadata":{},"sourceType":"module"}