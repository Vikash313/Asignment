{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Asignment\\\\asignment\\\\src\\\\components\\\\Quiz.js\";\nimport React, { Component, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { qBank } from './QuestCollection';\nimport '../style.css';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getQuestion = () => {\n      const {\n        cIndex\n      } = this.state;\n      this.setState(() => {\n        return {\n          question: qBank[cIndex].question,\n          options: qBank[cIndex].options,\n          answer: qBank[cIndex].answer\n        };\n      });\n    };\n\n    this.nextHandler = () => {\n      const {\n        Answer,\n        answer,\n        score\n      } = this.state;\n\n      if (Answer === answer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      this.setState({\n        cIndex: this.state.cIndex + 1,\n        Answer: null\n      });\n    };\n\n    this.submitHandler = () => {\n      if (this.state.cIndex === qBank.length - 1) {\n        this.setState({\n          qFinish: true\n        });\n      }\n    };\n\n    this.checkAnswer = answer => {\n      this.setState({\n        Answer: answer,\n        disabled: false\n      });\n    };\n\n    this.state = {\n      options: [],\n      Answer: null,\n      cIndex: 0,\n      disabled: true,\n      qFinish: false,\n      score: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestion();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      cIndex\n    } = this.state;\n\n    if (cIndex !== prevState.cIndex) {\n      this.setState(() => {\n        return {\n          question: qBank[cIndex].question,\n          options: qBank[cIndex].options,\n          answer: qBank[cIndex].answer\n        };\n      });\n    }\n  } //  useEffect(() => {\n  //      getQuestion();\n  //  },[])\n  // state = {\n  //     questionBank: []\n  // };\n  // getQuestions = () => {\n  //     QuestCollection().then(question => {\n  //         this.setState({\n  //             questionBank: question\n  //         });\n  //     });\n  // };\n  // componentDidMount() {\n  //     this.getQuestions();\n  // }\n\n\n  render() {\n    const {\n      question,\n      options,\n      cIndex,\n      Answer,\n      qFinish\n    } = this.state;\n\n    if (qFinish) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Your Score is \", this.state.score, \" out of 12\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `Question ${cIndex + 1} of ${qBank.length} `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `options ${Answer === option ? \"selected\" : null}`,\n        onClick: () => this.checkAnswer(option),\n        children: option\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }, this)), cIndex < qBank.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.disabled,\n        onClick: this.nextHandler,\n        children: \"Next \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), cIndex === qBank.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.submitHandler,\n        disabled: this.state.disabled,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    answer: state.answer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onquestNext: () => dispatch({\n      type: 'QUEST_NEXT',\n      value: 1\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz); // {this.state.questionBank.length > 0 && \n//     this.state.questionBank.map(({Id, question, answers, correctIndex}) => <h4>{question}</h4>)}","map":{"version":3,"sources":["E:/Asignment/asignment/src/components/Quiz.js"],"names":["React","Component","useEffect","connect","qBank","Quiz","constructor","props","getQuestion","cIndex","state","setState","question","options","answer","nextHandler","Answer","score","submitHandler","length","qFinish","checkAnswer","disabled","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","option","id","mapStateToProps","mapDispatchToProps","dispatch","onquestNext","type","value"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport  { qBank }  from './QuestCollection'\r\nimport '../style.css'\r\n\r\nclass Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             options: [],\r\n             Answer: null,\r\n             cIndex : 0,\r\n             disabled: true,\r\n             qFinish: false,\r\n             score: 0\r\n        }\r\n    }\r\n\r\n    getQuestion = () => {\r\n        const{cIndex} = this.state;\r\n        this.setState(() => {\r\n            return{\r\n                question: qBank[cIndex].question,\r\n                options: qBank[cIndex].options,\r\n                answer: qBank[cIndex].answer\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getQuestion();\r\n    }\r\n\r\n    nextHandler = () => {\r\n        const { Answer, answer, score } = this.state\r\n\r\n        if(Answer === answer){\r\n            this.setState({\r\n                score: score + 1\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            cIndex: this.state.cIndex + 1,\r\n            Answer: null\r\n        })\r\n    }\r\n\r\n    submitHandler = () => {\r\n        if(this.state.cIndex === qBank.length -1){\r\n            this.setState({\r\n                qFinish: true\r\n            })\r\n        }\r\n    }\r\n\r\n    checkAnswer = answer => {\r\n        this.setState({\r\n            Answer: answer,\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        const{cIndex} = this.state;\r\n        if(cIndex !== prevState.cIndex){\r\n           this.setState(() => {\r\n             return{\r\n                question: qBank[cIndex].question,\r\n                options: qBank[cIndex].options,\r\n                answer: qBank[cIndex].answer\r\n              }\r\n            })\r\n        }\r\n    }\r\n    \r\n    //  useEffect(() => {\r\n    //      getQuestion();\r\n    //  },[])\r\n    // state = {\r\n    //     questionBank: []\r\n    // };\r\n\r\n    // getQuestions = () => {\r\n    //     QuestCollection().then(question => {\r\n    //         this.setState({\r\n    //             questionBank: question\r\n    //         });\r\n    //     });\r\n\r\n    // };\r\n\r\n    // componentDidMount() {\r\n    //     this.getQuestions();\r\n    // }\r\n    render() {\r\n        const{ question, options, cIndex, Answer, qFinish } = this.state\r\n        \r\n        if(qFinish) {\r\n         return (\r\n             <div>\r\n                 <h2>Your Score is {this.state.score} out of 12</h2>\r\n             </div>\r\n          )\r\n         }\r\n         \r\n        return (\r\n            <div>\r\n                <h2>{question}</h2>\r\n                <span>{`Question ${cIndex + 1} of ${qBank.length} `}</span>\r\n                {\r\n                    options.map(option => \r\n                        <p key ={option.id} className={`options ${Answer === option? \"selected\" : null}`}\r\n                            onClick = {() => this.checkAnswer(option)}>\r\n                                {option}\r\n                        </p>\r\n                        )\r\n                }\r\n                {cIndex < qBank.length - 1 && \r\n                <button disabled = {this.state.disabled} onClick={this.nextHandler}>\r\n                    Next </button>}\r\n                {cIndex === qBank.length -1 &&\r\n                <button onClick={this.submitHandler} disabled ={this.state.disabled} >\r\n                    Submit\r\n                </button> }\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n    answer: state.answer\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n    onquestNext: () => dispatch({type: 'QUEST_NEXT', value: 1})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz)\r\n\r\n\r\n// {this.state.questionBank.length > 0 && \r\n//     this.state.questionBank.map(({Id, question, answers, correctIndex}) => <h4>{question}</h4>)}"]},"metadata":{},"sourceType":"module"}